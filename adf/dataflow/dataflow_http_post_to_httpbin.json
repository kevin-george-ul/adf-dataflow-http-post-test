{
	"name": "dataflow_http_post_to_httpbin",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_rest_githubusercontent",
						"type": "LinkedServiceReference"
					},
					"name": "jsonSourceGist",
					"description": "Get data from \n\nhttps://gist.githubusercontent.com/kevin-george-ul/94910ae3db6f359a83bd01730cce8ce0/raw/6d67ee9be0c19ca6a93b5e60649255a4fc3c9490/randomText.json"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "callHttpPasteBin",
					"linkedService": {
						"referenceName": "ls_rest_httpbin",
						"type": "LinkedServiceReference"
					}
				},
				{
					"name": "selectSomeText"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          body as (text as string),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'rest',",
				"     timeout: 30,",
				"     entity: '/kevin-george-ul/94910ae3db6f359a83bd01730cce8ce0/raw/6d67ee9be0c19ca6a93b5e60649255a4fc3c9490/randomText.json',",
				"     httpMethod: 'GET',",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> jsonSourceGist",
				"selectSomeText call(mapColumn(",
				"          body = SomeText",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     output(",
				"          headers as [string,string],",
				"          status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     format: 'rest',",
				"     store: 'restservice',",
				"     timeout: 30,",
				"     queryParameters = [\"testargument\" -> true],",
				"     httpMethod: 'POST',",
				"     entity: '/post',",
				"     headerColumnName: 'headers',",
				"     bodyColumnName: 'responseBody',",
				"     statusColumnName: 'status',",
				"     addResponseCode: true,",
				"     requestFormat: ['type' -> 'json'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> callHttpPasteBin",
				"jsonSourceGist select(mapColumn(",
				"          SomeText = body.text",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSomeText",
				"callHttpPasteBin select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2"
			]
		}
	}
}